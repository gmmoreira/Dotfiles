call plug#begin('~/.local/share/nvim/plugged')
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-unimpaired'

Plug 'qpkorr/vim-bufkill'
Plug 'terryma/vim-multiple-cursors'
Plug 'tommcdo/vim-exchange'

Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'

Plug 'lumiliet/vim-twig'

Plug 'scrooloose/nerdtree'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'

Plug 'ntpeters/vim-better-whitespace'
Plug 'chriskempson/base16-vim'

Plug 'ludovicchabant/vim-gutentags'
Plug 'vim-airline/vim-airline'

" completion
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'autozimu/LanguageClient-neovim', {
    \ 'branch': 'next',
    \ 'do': 'bash install.sh',
    \ }
" Initialize plugin system
call plug#end()

if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

let mapleader = ' '

let g:strip_whitespace_on_save = 1

" Disable netrw
let g:loaded_netrw       = 1
let g:loaded_netrwPlugin = 1

set autoindent
filetype plugin indent on

nmap <ESC> :nohl<CR>
inoremap jk <ESC>

if has("gui_running")
  colorscheme base16-solarized-light
  set guifont=Monaco\ 11
endif

if has("nvim")
  tnoremap <Esc> <C-\><C-n>
endif

" Completion
" languageclient
let g:LanguageClient_serverCommands = {
            \ 'ruby': [ 'solargraph',  'stdio' ],
            \ }
let g:deoplete#enable_at_startup = 1

" Spacemacs like mappings
nnoremap <leader>mrrf :!bundle exec rubocop %<CR>
nnoremap <leader>mrrF :!bundle exec rubocop -a %<CR>
nnoremap <leader>mtb :Rails<CR>
nnoremap <leader>fs :w<CR>
nnoremap <leader>pt :NERDTreeToggle<CR>
nnoremap <leader>mt<TAB> :A<CR>
nnoremap <leader>mx' cs"'
nnoremap <leader>mx" cs'"
nnoremap <leader>bb :ls<CR>
nnoremap <leader>bd :BD<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fR :Rename<SPACE>
nnoremap <leader>fed :e $MYVIMRC<CR>
nnoremap <leader>feR :so $MYVIMRC<CR>
nnoremap <leader>fD :bwipeout<CR>
nnoremap <leader>/ :Rg<CR>
nnoremap <leader>wd <C-w>q
nnoremap <leader>qq :wqa<CR>
vnoremap <leader>xa :EasyAlign<CR>
vnoremap <leader>xs :sort<CR>
nnoremap <leader><cr> :call LanguageClient_contextMenu()<CR>

let g:NERDSpaceDelims = 1
let g:NERDDefaultAlign = 'left'

set statusline+=%{gutentags#statusline()}
let g:gutentags_ctags_tagfile = '.tags'
let g:gutentags_file_list_command = {
      \ 'markers': {
      \ '.git': 'git ls-files',
      \ },
      \ }
let g:gutentags_generate_on_new = 1

set expandtab
set shiftwidth=2
set softtabstop=2
set number
set tags=./tags,.tags,.git/tags

if executable('rg')
  " --files: List files that would be searched but do not search
  " --no-ignore: Do not respect .gitignore, etc...
  " --hidden: Search hidden files and folders
  " --follow: Follow symlinks
  " --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
  let $FZF_DEFAULT_COMMAND = 'rg --files --no-ignore --hidden --follow -g "!.git/*" -g "!vendor/gems/*" -g "!vendor/bundle/*" -g "!tmp/cache/"'
  set grepprg=rg

  " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
  command! -bang -nargs=* Rg
        \ call fzf#vim#grep(
        \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
        \   <bang>0 ? fzf#vim#with_preview('up:60%')
        \           : fzf#vim#with_preview('right:50%:hidden', '?'),
        \   <bang>0)

  " Likewise, Files command with preview window
  command! -bang -nargs=? -complete=dir Files
        \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
endif
